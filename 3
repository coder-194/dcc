3

docker-compose.yml
---------------------------------------------------------------------------
version: '3.8'

services:
  backend:
    build:
      context: ./backend 
    ports:
      - "5000:5000"       
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend  
    ports:
      - "5001:5001"        
    networks:
      - app-network
    depends_on:
      - backend             

networks:
  app-network:
    driver: bridge


---------------------------------------------------------------------------
Frontend - app.py
---------------------------------------------------------------------------

from flask import Flask
import requests

app = Flask(__name__)

@app.route('/')
def hello_world():
    response = requests.get('http://backend:5000')
    return f"Frontend says: {response.text}"

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5001)


---------------------------------------------------------------------------
Frontend - requirements.txt
---------------------------------------------------------------------------

Flask==2.0.3
requests==2.26.0
Werkzeug==2.0.3


---------------------------------------------------------------------------
Frontend - Dockerfile
---------------------------------------------------------------------------


FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

COPY . /app

EXPOSE 5001

CMD ["python", "app.py"]

---------------------------------------------------------------------------
Backend - app.py
---------------------------------------------------------------------------

from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello_world():
	return 'Hello, World! From Backend!'
if __name__ == '__main__':
	app.run(debug=True, host='0.0.0.0', port=5000)

---------------------------------------------------------------------------
Backend - requirements.txt
---------------------------------------------------------------------------

Flask==2.0.3
requests==2.26.0
Werkzeug==2.0.3

---------------------------------------------------------------------------
Backend - Dockerfile
---------------------------------------------------------------------------

# Use Python 3.9 slim image
FROM python:3.9-slim
# Set the working directory
WORKDIR /app
# Copy requirements file and install dependencies
COPY requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application files
COPY . /app
# Expose port 5000 for the Flask app
EXPOSE 5000
# Run the Flask application
CMD ["python", "app.py"]

----------------------------------------------------------------------------------
cd---
docker-compose up --build
----------------------------------------------------------------------------------

http://localhost:5000
http://localhost:5001


docker-compose down




